-- ตาราง Employee
CREATE TABLE Employee (
    emp_ID SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone_number VARCHAR(15),
    role VARCHAR(20) CHECK (role IN ('เจ้าของ', 'พนักงาน', 'คนทำอาหาร')) NOT NULL
);

-- ตาราง Category
CREATE TABLE Category (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,   
    create_by INT REFERENCES Employee(emp_ID) ON DELETE SET NULL,
    create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    update_by INT REFERENCES Employee(emp_ID) ON DELETE SET NULL,
    update_at TIMESTAMP
);

-- ตาราง Category_item
CREATE TABLE Category_item (
    category_item_id SERIAL PRIMARY KEY,
    category_item_name VARCHAR(100) NOT NULL,
    category_item_balance INT DEFAULT 0,
    image_url VARCHAR(255) NOT NULL,            ------------------------------------------------------add
    category_id INT REFERENCES Category(category_id) ON DELETE CASCADE,
    create_by INT REFERENCES Employee(emp_ID) ON DELETE SET NULL,
    create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    update_by INT REFERENCES Employee(emp_ID) ON DELETE SET NULL,
    update_at TIMESTAMP
);

-- ตาราง Order (เปลี่ยนชื่อเป็น OrderInfo เพื่อหลีกเลี่ยงคำสงวนของ PostgreSQL)
CREATE TABLE OrderInfo (
    order_id SERIAL PRIMARY KEY,
    status VARCHAR(50) NOT NULL,
    create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ตาราง Table (เปลี่ยนชื่อเป็น TableInfo เพื่อหลีกเลี่ยงคำสงวนของ PostgreSQL)
CREATE TABLE TableInfo (
    table_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_id INT REFERENCES OrderInfo(order_id) ON DELETE SET NULL
    table_name INT NOT NULL CHECK (table_name > 0),
);

-- ตาราง Bill
CREATE TABLE Bill (
    bill_id SERIAL PRIMARY KEY,
    customer_count INT,
    table_id UUID REFERENCES TableInfo(table_id) ON DELETE SET NULL,
    payment_status BOOLEAN DEFAULT FALSE,
    create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    create_by INT REFERENCES Employee(emp_ID) ON DELETE SET NULL,
    update_at TIMESTAMP,
    update_by INT REFERENCES Employee(emp_ID) ON DELETE SET NULL,
    checkout TIMESTAMP
);

-- ตาราง Order_item
CREATE TABLE Order_item (
    order_item_id SERIAL PRIMARY KEY,
    category_item_id INT REFERENCES Category_item(category_item_id) ON DELETE CASCADE,
    quantity INT NOT NULL,
    order_id INT REFERENCES OrderInfo(order_id) ON DELETE CASCADE
);

SELECT 
    Bill.bill_id,
    Bill.customer_count,
    Bill.payment_status,
    Bill.create_at AS bill_create_at,
    Bill.checkout,
    
    Employee.username AS created_by,
    TableInfo.table_id,
    
    OrderInfo.order_id,
    OrderInfo.status AS order_status,
    OrderInfo.create_at AS order_create_at,
    
    Order_item.order_item_id,
    Order_item.quantity,
    
    Category_item.category_item_name,
    Category_item.category_item_balance,
    
    Category.category_name
FROM Bill
-- Join กับตาราง TableInfo เพื่อนำ table_id ของบิลมาแสดง
LEFT JOIN TableInfo ON Bill.table_id = TableInfo.table_id

-- Join กับตาราง Employee เพื่อนำชื่อของผู้สร้างบิลมาแสดง
LEFT JOIN Employee ON Bill.create_by = Employee.emp_ID

-- Join กับตาราง OrderInfo เพื่อดึง order_id และสถานะคำสั่งซื้อที่เกี่ยวข้องกับบิล
LEFT JOIN OrderInfo ON TableInfo.order_id = OrderInfo.order_id

-- Join กับตาราง Order_item เพื่อนำข้อมูลของแต่ละรายการสินค้าในคำสั่งซื้อมาแสดง
LEFT JOIN Order_item ON OrderInfo.order_id = Order_item.order_id

-- Join กับตาราง Category_item เพื่อนำชื่อสินค้าหมวดหมู่ และจำนวนสินค้าที่เหลือในสต็อกมาแสดง
LEFT JOIN Category_item ON Order_item.category_item_id = Category_item.category_item_id

-- Join กับตาราง Category เพื่อดึงชื่อหมวดหมู่สินค้าที่อยู่ในบิล
LEFT JOIN Category ON Category_item.category_id = Category.category_id

-- กำหนดเงื่อนไขการเลือกบิลที่ต้องการ (เปลี่ยนค่า 1 เป็นค่า bill_id ที่ต้องการตรวจสอบ)
WHERE Bill.bill_id = 1;
